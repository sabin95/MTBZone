# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master
    - develop
pr:
  branches:
    include:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  displayName: 'Install dotnet core 6.x'
  inputs:    
    packageType: 'sdk'
    version: '6.0.x'

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install -g Amazon.Lambda.Tools'

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    custom: 'lambda'
    arguments: 'package'
    workingDirectory: '$(System.DefaultWorkingDirectory)/CartsAPI'

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    custom: 'lambda'
    arguments: 'package'
    workingDirectory: '$(System.DefaultWorkingDirectory)/CatalogAPI'

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    custom: 'lambda'
    arguments: 'package'
    workingDirectory: '$(System.DefaultWorkingDirectory)/CatalogAPI.EventHandlers'

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    custom: 'lambda'
    arguments: 'package'
    workingDirectory: '$(System.DefaultWorkingDirectory)/OrdersAPI'

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    custom: 'lambda'
    arguments: 'package'
    workingDirectory: '$(System.DefaultWorkingDirectory)/OrdersAPI.EventHandlers'

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(System.DefaultWorkingDirectory)'
#     ArtifactName: 'artifact'
#     publishLocation: 'Container'

- task: replacetokens@5
  inputs:
    rootDirectory: '$(System.DefaultWorkingDirectory)/IaC'
    targetFiles: 'terraform.tfvars'
    encoding: 'auto'
    tokenPattern: 'default'
    writeBOM: true
    actionOnMissing: 'fail'
    keepToken: false
    actionOnNoFiles: 'fail'
    enableTransforms: false
    useLegacyPattern: false
    enableTelemetry: true

- task: TerraformInstaller@0
  inputs:
    terraformVersion: 'latest'

- task: TerraformCLI@0
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
    backendType: 'selfConfigured'
    allowTelemetryCollection: false

- task: TerraformCLI@0
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
    commandOptions: '-auto-approve'
    allowTelemetryCollection: false